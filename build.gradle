buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$vKotlin"
        classpath "com.vanniktech:gradle-maven-publish-plugin:$vMavenPublish"
    }
}

def projectName = rootProject.name
group 'in.mcxiv'
version vGdxUIExt

apply plugin: 'idea'
idea.module.excludeDirs += [file("docs/")]

subprojects {
    apply plugin: 'java-library'

    group = rootProject.group + path.replace(":", ".")
    version = rootProject.version

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    // http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc).tap { configureEach {/* https://discuss.gradle.org/t/passing-arguments-to-compiler-and-javadoc/1661 */ options.addStringOption('Xdoclint:none,-missing', '-quiet') } }
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    compileJava {
        sourceCompatibility = 8
        targetCompatibility = 8
        if (JavaVersion.current().isJava9Compatible()) options.release.set(8)
    }

    compileTestJava {
        sourceCompatibility = 8
        targetCompatibility = 8
        if (JavaVersion.current().isJava9Compatible()) options.release.set(8)
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://s01.oss.sonatype.org' }
        google()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        api "com.badlogicgames.gdx:gdx:$vGdx"
        testImplementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$vGdx"
        testImplementation "com.badlogicgames.gdx:gdx-platform:$vGdx:natives-desktop"
        testImplementation "junit:junit:$vJUnit"
    }

    javadoc {
        destinationDir = file('docs/apidocs')
        options { links 'https://javadoc.io/doc/com.badlogicgames.gdx/gdx/latest/' }
    }
}

configure(subprojects.findAll { it.path.contains(':vis') }) {
    dependencies {
        api "com.kotcrab.vis:vis-ui:$vVisUi"
    }
}

configure(subprojects.findAll { it.path.contains(':ktx') }) {
    apply plugin: "org.jetbrains.kotlin.jvm"
    compileKotlin { compilerOptions { incremental = true } }
    kotlin { jvmToolchain(8) }
    dependencies {
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
    }
}

configure(subprojects.findAll { it.path.contains(':vis:ktx') }) {
    dependencies {
        api "io.github.libktx:ktx-vis-style:$vKTX"
        api "io.github.libktx:ktx-vis:$vKTX"
    }
}

configure(subprojects.findAll { it.path.contains(':vis') || it.path.contains(':ktx') }) {
    def parentPath = path.toString()
    parentPath = parentPath.substring(0, parentPath.lastIndexOf(":"))
    dependencies { api project(parentPath) }
}

configure(project(':demo')) {
    apply plugin: "org.jetbrains.kotlin.jvm"
    compileKotlin { compilerOptions { incremental = true } }
    kotlin { jvmToolchain(8) }
    dependencies {
        api "com.kotcrab.vis:vis-ui:$vVisUi"
        api "io.github.libktx:ktx-actors:$vKTX"
        api "io.github.libktx:ktx-vis-style:$vKTX"
        api "io.github.libktx:ktx-vis:$vKTX"
        api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$vGdx"
        api "com.badlogicgames.gdx:gdx-platform:$vGdx:natives-desktop"

        rootProject.subprojects
            .findAll { it.path != ':demo' }
            .forEach { api it }

        testImplementation 'org.jetbrains.kotlin:kotlin-test'
    }
}

apply plugin: 'maven-publish'
publishing {
    publications {
        subprojects.forEach { subproject ->
            def classifier = subproject.path.replace(':', '-')
            def baseName = projectName + classifier

            def packageLibrary = subproject.tasks.register('packageLibrary', Jar) {
                archiveBaseName = baseName
                from subproject.sourceSets.main.output.classesDirs
//              from subproject.sourceSets.main.output.resourcesDir
                manifest { attributes 'Implementation-Title': baseName, 'Implementation-Version': version }
            }

            def packageSources = subproject.tasks.register('packageSources', Jar) {
                archiveBaseName = baseName
                dependsOn subproject.tasks.classes
                from subproject.sourceSets.main.allSource
                archiveClassifier = 'sources'
            }

            "$baseName"(MavenPublication) {
                artifactId = baseName
                artifact packageLibrary
                artifact packageSources
            }
        }
    }
}
